// --------------------------------------------------------------------------------------------------------------------
// <copyright file="UniformSeries.cs">
//   Copyright (c) 2017 Jonathan Arweck, see LICENSE.txt for license information
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

using System;
using DspSharp.Algorithms;
using DspSharp.Utilities;

namespace DspSharp.Series
{
    /// <summary>
    ///     Autogenerated series with a constant spacing between the elements on either a linear or logarithmic scale.
    /// </summary>
    public class UniformSeries : SeriesBase
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="UniformSeries" /> class.
        /// </summary>
        /// <param name="from">The first value of the series.</param>
        /// <param name="to">The last value of the series.</param>
        /// <param name="length">Determines how many values (including first and last) the series should contain.</param>
        /// <param name="logarithmic">Determines whether the series should be on a linear or a logarithmic scale.</param>
        public UniformSeries(double from, double to, int length, bool logarithmic = false) :
            base(logarithmic
                ? SignalGenerators.LogSeries(from, to, length)
                : SignalGenerators.LinSeries(from, to, length),
                logarithmic)
        {
            this.From = from;
            this.To = to;
            this.Length = length;
        }

        /// <summary>
        ///     The first value of the series.
        /// </summary>
        public double From { get; }

        public override int Length { get; }

        /// <summary>
        ///     The last value of the series.
        /// </summary>
        public double To { get; }

        /// <summary>
        ///     Compares the <see cref="UniformSeries" /> to an other <see cref="ISeries" /> for equality.
        /// </summary>
        /// <param name="other">The other <see cref="ISeries" />.</param>
        /// <returns>True if the other object is a <see cref="UniformSeries" /> with the same parameters, false otherwise.</returns>
        public override bool Equals(ISeries other)
        {
            if (other == null)
                return false;
            return this.Equals(other as UniformSeries);
        }

        /// <summary>
        ///     Compares the <see cref="UniformSeries" /> to an other <see cref="UniformSeries" /> for equality.
        /// </summary>
        /// <param name="other">The other <see cref="UniformSeries" />.</param>
        /// <returns>True if the other <see cref="UniformSeries" /> has the same parameters, false otherwise.</returns>
        public bool Equals(UniformSeries other)
        {
            if (other == null)
                return false;
            if (other.Length != this.Length)
                return false;
            if (Math.Abs(other.From - this.From) > 1e-9)
                return false;
            if (Math.Abs(other.To - this.To) > 1e-9)
                return false;
            if (other.IsLogarithmic != this.IsLogarithmic)
                return false;

            return true;
        }

        /// <summary>
        ///     Computes the Hashcode for the <see cref="UniformSeries" />.
        /// </summary>
        /// <returns>The Hashcode.</returns>
        public override int GetHashCode()
        {
            return HashHelper.GetHashCode(this.From, this.To, this.Length, this.IsLogarithmic);
        }
    }
}